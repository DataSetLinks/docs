openapi: 3.0.3
info:
  title: DataLinks
  version: 1.0.0
security:
  - bearerAuth: [ ]
servers:
  - url: https://api.datalinks.com/api/v1
    description: production server
paths:
  /data:
    get:
      summary: Fetch datasets
      description: Retrieve all available datasets
      operationId: getDatasets
      tags:
        - datasets
      responses:
        '200':
          $ref: '#/components/responses/ListOfDatasets'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /data/{namespace}:
    get:
      summary: Fetch datasets in namespace
      description: Retrieve dataset for a specific namespace.
      operationId: getDatasetsInNamespace
      tags:
        - datasets
      parameters:
        - $ref: '#/components/parameters/Namespace'
      responses:
        '200':
          $ref: '#/components/responses/ListOfDatasets'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /ingest/new/{namespace}/{datasetName}:
    post:
      summary: Create new dataset
      description: Creates a new dataset within a specified namespace.
      operationId: createDataset
      tags:
        - ingest
        - datasets
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatasetRequest'
      responses:
        '201':
          description: Dataset created successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
  /ingest/{namespace}/{datasetName}:
    post:
      summary: Ingest data
      description: Load data into specified dataset
      operationId: ingestData
      tags:
        - ingest
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestRequest'
            examples:
              movies:
                $ref: '#/components/examples/moviesExample'
              actors:
                $ref: '#/components/examples/actorsExample'
      responses:
        '200':
          description: Successful ingestion response.
        '401':
          $ref: '#/components/responses/Unauthorized'
  /infer/preview:
    post:
      summary: Preview
      description: Process data like in ingest but don't save in dataset
      operationId: previewInfer
      tags:
        - ingest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestRequest'
            examples:
              movies:
                $ref: '#/components/examples/moviesExample'
              actors:
                $ref: '#/components/examples/actorsExample'
      responses:
        '200':
          description: Successful preview response with processed data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestPreviewResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /data/{username}/{namespace}/{datasetName}:
    get:
      summary: Get dataset information
      description: Allow to get dataset information
      operationId: getDatasetInformation
      tags:
        - dataset
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      responses:
        '200':
          description: Successful return dataset information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetResponse'

        '404':
          description: Dataset not found
        '400':
          description: Bad request
    post:
      summary: Query data
      description: Execute ontology query
      operationId: queryDataset
      tags:
        - query
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      requestBody:
        required: false
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/OntologyRequest'
            examples:
              WilliamWallace:
                value: "OntologyObject(\"movies\").filter(name==\"Braveheart\").searchAround().find(\"actors\").filter(name==\"Mel Gibson\")"
              EarliestMovie:
                value: "OntologyObject(\"movies\").sortDescending(\"year\").limit(1)"
              empty:
                value: ""
      responses:
        '200':
          description: Successful response with the ontology data object.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          $ref: '#/components/responses/Unauthorized'
  /data/{username}/{namespace}/{datasetName}/rename:
    post:
      summary: Rename a dataset
      operationId: renameDataset
      tags:
        - dataset
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Successful rename of a dataset
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Dataset not found or not allowed to modify
  /data/{username}/{namespace}/{datasetName}/query:
    post:
      summary: Query data
      description: Execute ontology query
      operationId: queryData
      tags:
        - query
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryDataRequest'
      responses:
        '200':
          description: Successful response with the ontology data object.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          $ref: '#/components/responses/Unauthorized'
  /data/{username}/{namespace}/{datasetName}/inferDefinition:
    put:
      summary: Update infer definition
      description: Allow to update saved infer
      operationId: updateInferDefinition
      tags:
        - query
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiInferenceDefinition'
      responses:
        '201':
          description: Successfully created new infer definition
        '404':
          description: Dataset not found or not allowed to modify
        '400':
          description: Bad request
  /data/{username}/{namespace}/{datasetName}/balefire:
    delete:
      summary: Delete all data and metadata for a dataset (balefire)
      description: Remove all data, links, and metadata for the specified dataset. This is irreversible.
      operationId: balefireDataset
      tags:
        - dataset
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      responses:
        '200':
          description: Dataset and all related data deleted successfully.
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Dataset not found or not allowed to modify
  /links/{username}/{namespace}/{datasetName}:
    get:
      summary: Load links
      description: Load links for specified dataset
      operationId: getLinks
      tags:
        - links
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      responses:
        '200':
          description: List of links related to specified dataset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestLinksResponse'
        '204':
          description: There are no links associated with specified dataset
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: "Rebuild links"
      description: "Recalculate links for specified dataset"
      operationId: rebuildLinks
      tags:
        - links
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestLinksRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestLinksResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Forbidden - User doesn't have access to the dataset
  /links/preview/{username}/{namespace}/{datasetName}:
    post:
      summary: "Preview links"
      description: "Show what recalculate would do"
      operationId: previewLinks
      tags:
        - links
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestLinksRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestLinksResponse'
  /ontology/{username}/{namespace}/{datasetName}:
    get:
      description: load ontology
      operationId: getConnectedLinks
      tags:
        - ontology
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OntologyResponse'
        '204':
          description: There is no ontology for specified dataset
    post:
      description: save ontology
      operationId: saveConnections
      tags:
        - ontology
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/DatasetName'
        - $ref: '#/components/parameters/Username'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyOntologyRequest'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
  /schema/datasets/all:
    get:
      summary: List all datasets
      description: Retrieve all datasets visible to the authenticated user
      operationId: listAllDatasets
      tags:
        - schema
        - datasets
      responses:
        '200':
          $ref: '#/components/responses/ListOfDatasets'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /schema/namespace:
    get:
      summary: List namespaces
      description: Retrieve all namespaces accessible to the authenticated user
      operationId: listNamespaces
      tags:
        - schema
        - namespaces
      responses:
        '200':
          $ref: '#/components/responses/ListOfNamespaces'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /schema/{user}/namespaces:
    get:
      summary: List user namespaces
      description: Retrieve namespaces for a specific user (use 'self' for current user)
      operationId: listUserNamespaces
      tags:
        - schema
        - namespaces
      parameters:
        - name: user
          in: path
          required: true
          description: Username or 'self' for current user
          schema:
            type: string
          example: self
      responses:
        '200':
          $ref: '#/components/responses/ListOfNamespaces'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User not found
  /schema/{user}/{namespace}/datasets:
    get:
      summary: List datasets within namespace
      description: Retrieve datasets within a specific namespace for a user
      operationId: listDatasetsWithinNamespace
      tags:
        - schema
        - datasets
      parameters:
        - name: user
          in: path
          required: true
          description: Username or 'self' for current user
          schema:
            type: string
          example: self
        - $ref: '#/components/parameters/Namespace'
      responses:
        '200':
          $ref: '#/components/responses/ListOfDatasets'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User or namespace not found
  /user/tokens:
    get:
      description: list all user tokens
      operationId: listTokens
      tags:
        - user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenResponse'
  /user/token:
    post:
      description: add user token
      operationId: addToken
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToken'
  /user/token/{tokenId}:
    delete:
      description: delete user token
      operationId: deleteToken
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/TokenId'
      responses:
        '200':
          description: Success

components:
  parameters:
    DatasetName:
      name: datasetName
      in: path
      required: true
      description: Name of the dataset.
      schema:
        type: string
      examples:
        movies:
          value: "movies"
          summary: "Movies"
        actors:
          value: "actors"
          summary: "Actors"
    Namespace:
      name: namespace
      in: path
      required: true
      description: Namespace for the dataset.
      schema:
        type: string
      example: cinematography
    TokenId:
      name: tokenId
      in: path
      required: true
      description: Token ID
      schema:
        type: integer
    Username:
      name: username
      in: path
      required: true
      description: The username associated with the request.
      schema:
        type: string

  schemas:
    ApiDatasetDescription:
      type: object
      properties:
        name:
          type: string
          description: Dataset name
        namespace:
          type: string
          description: Namespace name
        nameWithNamespace:
          type: string
          description: The name concatenated with the namespace.
          deprecated: true
        owner:
          type: string
          description: The username associated with the data.
        user:
          type: string
          description: The username associated with the data.
          deprecated: true
        visibility:
          type: string
          description: Indicates whether the data is public or private.
          enum:
            - Public
            - Private
      required:
        - owner
        - name
        - namespace
        - visibility
    ApiInferenceDefinition:
      type: object
      properties:
        dataDescription:
          type: string
          description: Data description of the dataset.
          maxLength: 10000
        fieldDefinition:
          type: string
          description: Definition of the dataset fields.
          maxLength: 10000
      required:
        - dataDescription
        - fieldDefinition
    ApiDatasetMetadata:
      type: object
      properties:
        rowCount:
          type: integer
          format: int64
          description: Number of rows in dataset.
      required:
        - rowCount
    ApiLink:
      type: object
      properties:
        destination:
          type: string
          example: "ri.user.examples.companies.other_addresses"
        hits:
          type: integer
          format: int64
          example: 5
        matchType:
          type: string
          example: "ExactMatch"
        origin:
          type: string
          example: "ri.user.examples.companies.nationalities"
      required:
        - destination
        - origin
        - hits
        - matchType
      example:
        destination: "ri.user.examples.actor.name"
        hits: 6
        matchType: "ExactMatch"
        origin: "ri.user.examples.movies.director"
    ApiNamespace:
      type: object
      properties:
        name:
          type: string
          description: The name of the namespace
          example: "cinematography"
        owner:
          type: string
          format: uuid
          description: UUID of the namespace owner
          example: "550e8400-e29b-41d4-a716-446655440000"
      required:
        - name
        - owner
    CreateDatasetRequest:
      type: object
      properties:
        inferDefinition:
          $ref: '#/components/schemas/ApiInferenceDefinition'
        isPrivate:
          type: boolean
          description: Sets the privacy status of the dataset. Set it to `true` for private datasets.
          example: true
          deprecated: true
        visibility:
          type: string
          enum:
            - Public
            - Private
          example: Private
    CreateTokenRequest:
      type: object
      properties:
        expires_at:
          type: string
        name:
          type: string
      required:
        - name
    DatasetResponse:
      type: object
      properties:
        dataset:
          $ref: '#/components/schemas/ApiDatasetDescription'
        inferDefinition:
          $ref: '#/components/schemas/ApiInferenceDefinition'
        metadata:
          $ref: '#/components/schemas/ApiDatasetMetadata'
      required:
        - dataset
        - metadata
    DatasetsResponse:
      type: array
      items:
        $ref: '#/components/schemas/ApiDatasetDescription'
    ErrorResponse:
      type: object
      properties:
        error_code:
          type: string
          example: "UNAUTHORIZED"
        error_message:
          type: string
          example: ""
        message:
          type: string
          example: "Missing authentication token"
        sub_errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              message:
                type: string
            required:
              - message
              - code
      required:
        - message
        - error_code
    IngestLinksResponse:
      type: array
      items:
        $ref: '#/components/schemas/ApiLink'
    IngestLinksRequest:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        link:
          type: object
          properties:
            ExactMatch:
              type: object
              properties:
                minDistinct:
                  type: number
                minVariation:
                  type: number
              additionalProperties:
                type: string
            GeoMatch:
              type: object
              properties:
                distance:
                  type: number
                distanceUnit:
                  type: string
              additionalProperties:
                type: string
      required:
        - data
        - link
      example:
        data:
          - name: "Braveheart"
            year: "1995"
            budget: "72000000"
            director: "Mel Gibson"
          - name: "Argo"
            year: "2012"
            budget: "44500000"
            director: "Ben Affleck"
        link:
          ExactMatch: null
          GeoMatch: null
    IngestRequest:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        infer:
          type: object
          properties:
            steps:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/TableStep'
                  - $ref: '#/components/schemas/RowsStep'
                  - $ref: '#/components/schemas/NormaliseStep'
                  - $ref: '#/components/schemas/ValidateStep'
                  - $ref: '#/components/schemas/ReverseGeoStep'
        link:
          type: object
          properties:
            ExactMatch:
              type: string
              nullable: true
              example: null
      required:
        - data
    IngestPreviewResponse:
      type: array
      items:
        type: object
        additionalProperties: true
        description: |
          Each object represents a processed row with dynamic properties based on the inference steps.
          May include metadata fields prefixed with '__metadata_'.
      example:
        - id: "001"
          __metadata_textToTable: "name -> John Smith, age -> 28, department -> Engineering"
          name: "John Smith"
          age: "28"
          gender: "Male"
          department: "Engineering"
          location: "New York"
        - id: "002"
          __metadata_textToTable: "name -> Sarah Johnson, age -> 32, department -> Marketing"
          name: "Sarah Johnson"
          age: "32"
          gender: "Female"
          department: "Marketing"
          location: "California"
        - id: "003"
          name: "Michael Brown"
          age: "45"
          gender: "Male"
          department: "Finance"
          location: "Texas"
          __metadata_normalize: "Normalized department field from 'Fin Dept' to 'Finance'"

    ModifyOntologyRequest:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/ApiLink'
        remove:
          type: array
          items:
            $ref: '#/components/schemas/ApiLink'

    NormaliseStep:
      type: object
      properties:
        type:
          type: string
          enum: [ normalise ]
        mode:
          type: string
          enum: [ all-in-one, field-by-field, embeddings ]
          description: Normalisation mode
        targetCols:
          type: object
          additionalProperties:
            type: string
          description: Target columns with their descriptions
        helperPrompt:
          type: string
          description: Prompt to help the LLM understand the domain
      required:
        - type
        - mode
        - targetCols

    OntologyResponse:
      type: array
      items:
        $ref: '#/components/schemas/ApiLink'
    OntologyRequest:
      type: string
      example: "OntologyObject(\"objectName\").get()"
      description: for details check [Querying data](/Querying_data)
    QueryDataRequest:
      type: object
      properties:
        query:
          type: string
          default: ""
        useNaturalLanguageQuery:
          type: boolean
          default: false
        model:
          type: string
        provider:
          type: string

    ReverseGeoStep:
      type: object
      properties:
        type:
          type: string
          enum: [reverseGeo]
        deriveFrom:
          type: string
          description: Location column name
      required:
        - type
        - deriveFrom

    RowsStep:
      type: object
      properties:
        type:
          type: string
          enum: [ rows ]
        deriveFrom:
          type: string
          description: Column name from where the json content will be read
      required:
        - type
        - deriveFrom

    TableStep:
      type: object
      properties:
        type:
          type: string
          enum: [ table ]
        deriveFrom:
          type: string
          description: Column name from where the column should be derived from
        helperPrompt:
          type: string
          description: Prompt to guide the AI system for higher accuracy during extraction
          example: "This text contains a table comma separated, but instead of line breaks we are using a ';'."
      required:
        - type
        - deriveFrom

    UserToken:
      type: object
      properties:
        created_at:
          type: string
        expires_at:
          type: string
        id:
          type: integer
          format: int64
        last_used_at:
          type: string
        name:
          type: string
        token:
          type: string
          nullable: true
      required:
        - id
        - name
        - created_at
        - expires_at
        - token
    UserTokenResponse:
      type: array
      items:
        $ref: '#/components/schemas/UserToken'

    ValidateStep:
      type: object
      properties:
        type:
          type: string
          enum: [ validate ]
        mode:
          type: string
          enum: [ regex, rows, fields ]
          description: Validation mode
        columns:
          type: array
          items:
            type: string
          description: Columns to validate
      required:
        - type
        - mode
        - columns

  responses:
    BadRequest:
      description: Bad request. The request was malformed or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Forbidden. User doesn't have access to this resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ListOfDatasets:
      description: Successful response containing data with namespace details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DatasetsResponse'
    ListOfNamespaces:
      description: Successful response containing list of namespaces accessible to the user.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ApiNamespace'
    NotFound:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized. This error occurs if the authentication token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: |
        Use a Bearer token for authentication. Submit the token using the `Authorization` 
        header: `Authorization: Bearer <token>`.

  examples:
    moviesExample:
      summary: movies
      value:
        data:
          - name: Braveheart
            year: 1995
            budget: 72000000
            director: Mel Gibson
          - name: Argo
            year: 2012
            budget: 44500000
            director: Ben Affleck
          - name: A Quiet Place
            year: 2018
            budget: 17000000
            director: John Krasinski
          - name: Dances with Wolves
            year: 1990
            budget: 22000000
            director: Kevin Costner
          - name: Unforgiven
            year: 1992
            budget: 14000000
            director: Clint Eastwood
          - name: The Postman
            year: 1997
            budget: 80000000
            director: Kevin Costner
        link:
          ExactMatch: null
    actorsExample:
      summary: actors
      value:
        data:
          # Braveheart
          - name: Mel Gibson
            age: 68
            nationality: American
          - name: Sophie Marceau
            age: 57
            nationality: French

          # Argo
          - name: Ben Affleck
            age: 52
            nationality: American
          - name: Bryan Cranston
            age: 68
            nationality: American

          # A Quiet Place
          - name: John Krasinski
            age: 45
            nationality: American
          - name: Emily Blunt
            age: 41
            nationality: British

          # Dances with Wolves
          - name: Kevin Costner
            age: 69
            nationality: American
          - name: Mary McDonnell
            age: 72
            nationality: American

          # Unforgiven
          - name: Clint Eastwood
            age: 94
            nationality: American
          - name: Morgan Freeman
            age: 86
            nationality: American

          # The Postman
          - name: Kevin Costner
            age: 69
            nationality: American
          - name: Will Patton
            age: 70
            nationality: American

        link:
          ExactMatch: null
